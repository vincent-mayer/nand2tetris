// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int j, temp;
        
        let screen = 16384;
        let color = true;
        
        let twoToThe = Array.new(16);
        let j = 0;
        let temp = 1;
        while (j < 16) {
            let twoToThe[j] = temp;
            let temp = temp + temp;
            let j = j + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        while (i < 8192) {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int temp, ix;
        let temp = x;
        while (temp > 15) {
            let temp = temp - 16;
        }
        let ix = y * 32 + x / 16;
        if (color) {
            let screen[ix] = screen[ix] | twoToThe[temp];
        }
        else {
            let screen[ix] = screen[ix] & (~twoToThe[temp]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        let a = 0;
        let b = 0;

        while ((~(Math.abs(a) > dx)) & (~(Math.abs(b) > dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adyMinusbdx < 0) {
                // (a/b) < (dx/dy) overshooting
                if (x2 > x1) {
                    let a = a + 1;
                }
                else {
                    let a = a - 1;
                }
                let adyMinusbdx = adyMinusbdx + dy;
            }
            else { // undershooting
                if (y2 > y1) {
                    let b = b + 1;
                }
                else {
                    let b = b - 1;
                }
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        // var int dx, ct, temp;
        // let dx = x2 - x1;
        // let ct = 0;
        // let temp = dx;
        // while (temp > 16) {
        //     let ct = ct + 1;
        //     let temp = temp - 16;
        // }
        // while (~(y1 > y2)) {

        // }
        var int a, b;
        let a = 0;
        let b = 0;
        while(~((y1 + a) > y2)) {
            while (~((x1 + a) > x2)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                let a = a + 1;
            }
            let b = b + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, t;
        let dy = -r;
        while (~(dy > r)) {
            let t = Math.sqrt(r * r + dy * dy);
            do Screen.drawRectangle(x - t, y + dy, x + t, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
