// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array data;
    field int curLen, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let data = Array.new(1);
        }
        else {
            let data = Array.new(maxLength);
        }
        let curLen = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do data.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < maxLen) {
            let data[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (curLen < maxLen) {
            let data[curLen] = c;
            let curLen = curLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (curLen > 0) {
            let curLen = curLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int j, v, d;
        var boolean negate;

        let j = 0;
        let negate = false;
        if (data[0] = 45) {
            let negate = true;
            let j = 1;
        }

        while (j < curLen) {
            let d = data[j] - 48;
            let v = v * 10 + d;
            let j = j + 1;
        }
        if (negate) {
            let v = -v;
        }
        return v;
    }

    method void erase() {
        while (curLen > 0) {
            do eraseLastChar();
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, c, i, j;
        var boolean negate;
        
        do erase();

        let negate = false;
        if (val < 0) {
            let negate = true;
            let val = Math.abs(val);
            do appendChar(45);
        }

        while (val > 9) {
            let lastDigit = val;
            while(lastDigit > 9) {
                let lastDigit = lastDigit - 10;
            }
            let c = lastDigit + 48;
            let val = val / 10;
            do appendChar(c);
        }
        let c = val + 48;
        do appendChar(c);

        // reverse
        let i = 0;
        let j = curLen - 1;
        if (negate) {
            let i = 1;
        }
        while (j > i) {
            let c = data[j];
            let data[j] = data[i];
            let data[i] = c;
            let j = j - 1;
            let i = i + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
