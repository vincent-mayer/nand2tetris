// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
 class Memory {

    static int freeList;
    static Array memory;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let heap = 2048;
        let heap[0] = 14335;
        let heap[1] = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    function int getFreeList() {
        return freeList;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int temp, len, next, block, tempAddr;
        var boolean isEnd;
        let isEnd = false;
        let len = Memory.peek(freeList);
        let next = freeList;
        while (~(len > (size + 3))) {
            let next = Memory.peek(next + 1);
            let len = Memory.peek(next);
        }
        let freeList = next;
        // next points to cur_segment-length, set length to 0 i.e. consumed.
        do Memory.poke(freeList, size + 1);
        // Set freelist to next ptr
        let freeList = freeList + 1;
        do Memory.poke(freeList, freeList + size + 1);
        let block = freeList + 1;
        let freeList = freeList + size + 1;
        // Initialize the memory
        let temp = 0;
        while (temp < size) {
            do Memory.poke(block + temp, 88);
            let temp = temp + 1;
        }
        // Set the length and next of the new start segment of Freelist
        do Memory.poke(freeList, len - (size + 1));
        do Memory.poke(freeList + 1, freeList);

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int temp, len, j;
        let len = o[-2];
        let j = 0;
        while (j < (len - 1)) {
            let o[j] = -1;
            let j = j + 1;
        }
        let temp = freeList; // Holds current freelist
        let freeList = o - 2; // o-1 is address of length of segment
        let o[-1] = temp;
        return;
    }    
}
