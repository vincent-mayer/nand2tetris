<class>
  <keyword> class </keyword>
  <identifier> PongGame;type:class;kind:NONE;index:-1; </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <identifier> PongGame;type:static;kind:STATIC;index:-1; </identifier>
    <identifier> instance;type:PongGame;kind:STATIC;index:0; </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Bat;type:field;kind:FIELD;index:-1; </identifier>
    <identifier> bat;type:Bat;kind:FIELD;index:0; </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Ball;type:field;kind:FIELD;index:-1; </identifier>
    <identifier> ball;type:Ball;kind:FIELD;index:1; </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> wall;type:int;kind:FIELD;index:2; </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> exit;type:boolean;kind:FIELD;index:3; </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> score;type:int;kind:FIELD;index:4; </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> lastWall;type:int;kind:FIELD;index:5; </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> batWidth;type:int;kind:FIELD;index:6; </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> PongGame;type:constructor;kind:FIELD;index:-1; </identifier>
    <identifier> new;type:PongGame;kind:NONE;index:-1; </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen;type:do;kind:ARG;index:-1; </identifier>
          <symbol> . </symbol>
          <identifier> clearScreen;type:.;kind:ARG;index:-1; </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> batWidth;type:let;kind:ARG;index:6; </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 50 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> bat;type:let;kind:ARG;index:0; </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Bat;type:=;kind:ARG;index:-1; </identifier>
              <symbol> . </symbol>
              <identifier> new;type:.;kind:ARG;index:-1; </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 230 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 229 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> batWidth;type:.;kind:ARG;index:6; </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 7 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ball;type:let;kind:ARG;index:1; </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ball;type:=;kind:ARG;index:-1; </identifier>
              <symbol> . </symbol>
              <identifier> new;type:.;kind:ARG;index:-1; </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 253 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 222 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 511 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 229 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> ball;type:do;kind:ARG;index:1; </identifier>
          <symbol> . </symbol>
          <identifier> setDestination;type:.;kind:ARG;index:-1; </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 400 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen;type:do;kind:ARG;index:-1; </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle;type:.;kind:ARG;index:-1; </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 238 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 511 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 240 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output;type:do;kind:ARG;index:-1; </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor;type:.;kind:ARG;index:-1; </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 22 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output;type:do;kind:ARG;index:-1; </identifier>
          <symbol> . </symbol>
          <identifier> printString;type:.;kind:ARG;index:-1; </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> Score: 0 </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> exit;type:let;kind:ARG;index:3; </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> score;type:let;kind:ARG;index:4; </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> wall;type:let;kind:ARG;index:2; </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> lastWall;type:let;kind:ARG;index:5; </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose;type:void;kind:NONE;index:-1; </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> bat;type:do;kind:ARG;index:0; </identifier>
          <symbol> . </symbol>
          <identifier> dispose;type:.;kind:ARG;index:-1; </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> ball;type:do;kind:ARG;index:1; </identifier>
          <symbol> . </symbol>
          <identifier> dispose;type:.;kind:ARG;index:-1; </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory;type:do;kind:ARG;index:-1; </identifier>
          <symbol> . </symbol>
          <identifier> deAlloc;type:.;kind:ARG;index:-1; </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> newInstance;type:void;kind:NONE;index:-1; </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> instance;type:let;kind:ARG;index:0; </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> PongGame;type:=;kind:ARG;index:-1; </identifier>
              <symbol> . </symbol>
              <identifier> new;type:.;kind:ARG;index:-1; </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <identifier> PongGame;type:function;kind:NONE;index:-1; </identifier>
    <identifier> getInstance;type:PongGame;kind:NONE;index:-1; </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> instance;type:return;kind:ARG;index:0; </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> run;type:void;kind:NONE;index:-1; </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <identifier> key;type:char;kind:VAR;index:0; </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <identifier> exit;type:~;kind:VAR;index:3; </identifier>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> key;type:(;kind:VAR;index:0; </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> & </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> exit;type:~;kind:VAR;index:3; </identifier>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> key;type:let;kind:VAR;index:0; </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> Keyboard;type:=;kind:VAR;index:-1; </identifier>
                      <symbol> . </symbol>
                      <identifier> keyPressed;type:.;kind:VAR;index:-1; </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bat;type:do;kind:VAR;index:0; </identifier>
                  <symbol> . </symbol>
                  <identifier> move;type:.;kind:VAR;index:-1; </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> moveBall;type:do;kind:VAR;index:3; </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Sys;type:do;kind:VAR;index:-1; </identifier>
                  <symbol> . </symbol>
                  <identifier> wait;type:.;kind:VAR;index:-1; </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 50 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key;type:(;kind:VAR;index:0; </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 130 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bat;type:do;kind:VAR;index:0; </identifier>
                  <symbol> . </symbol>
                  <identifier> setDirection;type:.;kind:VAR;index:-1; </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> key;type:(;kind:VAR;index:0; </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 132 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> bat;type:do;kind:VAR;index:0; </identifier>
                      <symbol> . </symbol>
                      <identifier> setDirection;type:.;kind:VAR;index:-1; </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 2 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> key;type:(;kind:VAR;index:0; </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 140 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> exit;type:let;kind:VAR;index:3; </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <keyword> true </keyword>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ~ </symbol>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> key;type:(;kind:VAR;index:0; </identifier>
                      </term>
                      <symbol> = </symbol>
                      <term>
                        <integerConstant> 0 </integerConstant>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> & </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ~ </symbol>
                  <term>
                    <identifier> exit;type:~;kind:VAR;index:3; </identifier>
                  </term>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> key;type:let;kind:VAR;index:0; </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> Keyboard;type:=;kind:VAR;index:-1; </identifier>
                  <symbol> . </symbol>
                  <identifier> keyPressed;type:.;kind:VAR;index:-1; </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> bat;type:do;kind:VAR;index:0; </identifier>
              <symbol> . </symbol>
              <identifier> move;type:.;kind:VAR;index:-1; </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> moveBall;type:do;kind:VAR;index:3; </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Sys;type:do;kind:VAR;index:-1; </identifier>
              <symbol> . </symbol>
              <identifier> wait;type:.;kind:VAR;index:-1; </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 50 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
